<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Générateur de Ligne de Basse</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c; /* Fond sombre */
            color: #e2e8f0; /* Texte clair */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
            box-sizing: border-box;
        }
        .container {
            background-color: #2d3748; /* Fond sombre légèrement plus clair */
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2);
            text-align: center;
            width: 100%;
            max-width: 600px; /* Augmenté pour accueillir les deux affichages */
        }
        .button {
            background-color: #4299e1; /* Bleu */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
        }
        .button:hover {
            background-color: #3182ce; /* Bleu plus foncé au survol */
        }
        .button:active {
            background-color: #2b6cb0; /* Bleu encore plus foncé au clic */
            transform: translateY(1px);
        }
        .current-and-next-scale-display {
            display: flex; /* Utilise flexbox pour aligner les éléments */
            justify-content: center; /* Centre horizontalement */
            align-items: baseline; /* Aligne les bases des textes */
            margin-bottom: 2rem;
            flex-wrap: wrap; /* Permet le retour à la ligne sur petits écrans */
        }
        .scale-display {
            font-size: 2.5rem;
            font-weight: 700;
            color: #63b3ed; /* Bleu clair pour l'emphase */
            margin-right: 1rem; /* Espace entre la gamme actuelle et la prochaine */
            white-space: nowrap; /* Empêche le retour à la ligne */
            transition: background-color 0.1s ease-out; /* Pour l'effet visuel de l'accord */
            padding: 0.2rem 0.5rem;
            border-radius: 0.5rem;
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #4299e1;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 1rem auto;
            display: none; /* Caché par default */
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .tempo-control {
            margin-top: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .tempo-control label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        .tempo-control input[type="range"] {
            width: 100%;
            -webkit-appearance: none;
            height: 8px;
            background: #4a5568;
            border-radius: 5px;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }
        .tempo-control input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #63b3ed;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        .tempo-control input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #63b3ed;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        /* Styles pour les cases à cocher */
        .scale-selection-container {
            text-align: left;
        }
        .scale-selection-container label {
            font-weight: normal;
        }
        .form-checkbox {
            accent-color: #4299e1; /* Couleur d'accentuation pour les cases à cocher */
        }
        .next-scale-display {
            font-size: 1.2rem;
            font-weight: 600;
            color: #90cdf4; /* Bleu clair plus doux */
            background-color: rgba(45, 55, 72, 0.6); /* Fond sombre semi-transparent */
            padding: 0.3rem 0.8rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            white-space: nowrap; /* Empêche le retour à la ligne */
        }
        @media (max-width: 480px) {
            .current-and-next-scale-display {
                flex-direction: column; /* Empile les éléments sur mobile */
                align-items: center;
            }
            .scale-display {
                margin-right: 0;
                margin-bottom: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold mb-6">Générateur de Ligne de Basse</h1>
        
        <div class="current-and-next-scale-display">
            <div id="scaleDisplay" class="scale-display">
                Cliquez sur "Démarrer"
            </div>
            <div id="nextScaleDisplay" class="next-scale-display">
                N/A
            </div>
        </div>

        <div class="tempo-control">
            <label for="tempoSlider">Tempo: <span id="bpmDisplay">100</span> BPM</label>
            <input type="range" id="tempoSlider" min="60" max="200" value="100">
        </div>

        <button id="startButton" class="button w-full mb-4">Démarrer la génération</button>
        <button id="stopButton" class="button w-full bg-red-500 hover:bg-red-600" disabled>Arrêter la génération</button>
        <div id="loadingSpinner" class="loading-spinner"></div>

        <div class="scale-selection-container mt-4 p-4 bg-gray-700 rounded-lg shadow-inner">
            <h2 class="text-xl font-semibold mb-3 text-blue-300">Sélection des Gammes</h2>
            <div class="flex justify-between mb-3">
                <button id="selectAllButton" class="button text-sm px-3 py-1 bg-gray-600 hover:bg-gray-500">Tout sélectionner</button>
                <button id="deselectAllButton" class="button text-sm px-3 py-1 bg-gray-600 hover:bg-gray-500">Tout désélectionner</button>
            </div>
            <div class="grid grid-cols-2 gap-x-4 gap-y-2 text-left">
                <div>
                    <h3 class="font-bold text-blue-200 mb-2">Majeures</h3>
                    <div id="majorScalesCheckboxes" class="flex flex-col">
                    </div>
                </div>
                <div>
                    <h3 class="font-bold text-blue-200 mb-2">Mineures</h3>
                    <div id="minorScalesCheckboxes" class="flex flex-col">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.documentElement.addEventListener('mousedown', () => {
            if (Tone.context.state !== 'running') {
                Tone.context.resume();
            }
        });

        const bassSynth = new Tone.FMSynth({
            harmonicity: 0.8, modulationIndex: 5, oscillator: { type: "sine" },
            envelope: { attack: 0.005, decay: 0.6, sustain: 0.4, release: 1.8 },
            modulation: { type: "triangle" },
            modulationEnvelope: { attack: 0.005, decay: 0.2, sustain: 0.0, release: 0.5 }
        });
        const bassFilter = new Tone.Filter(4000, "lowpass");
        const bassReverb = new Tone.Reverb({ decay: 0.05, preDelay: 0.01 });
        const bassGain = new Tone.Gain(25.0).toDestination();
        bassSynth.chain(bassFilter, bassReverb, bassGain);

        const chordSynth = new Tone.PolySynth(Tone.FMSynth, {
            harmonicity: 3.0, modulationIndex: 10, oscillator: { type: "sine" },
            envelope: { attack: 0.005, decay: 0.8, sustain: 0.2, release: 1.5 },
            modulation: { type: "square" },
            modulationEnvelope: { attack: 0.005, decay: 0.2, sustain: 0.0, release: 0.2 }
        });

        const chordEQ = new Tone.EQ3({ low: -5, mid: 0, high: 8 });
        const chordChorus = new Tone.Chorus(2, 3, 0.5);
        const chordFreeverb = new Tone.Freeverb({ roomSize: 0.4, dampening: 3000 });
        const chordLimiter = new Tone.Limiter(-6);
        const chordGain = new Tone.Gain(3.0).toDestination();
        chordSynth.chain(chordEQ, chordChorus, chordFreeverb, chordLimiter, chordGain);

        const metronomeSynth = new Tone.MembraneSynth({ pitchDecay: 0.01, octaves: 8, envelope: { attack: 0.001, decay: 0.2, sustain: 0.01, release: 0.1 }}).toDestination();
        const hiHatSynth = new Tone.MetalSynth({ frequency: 200, envelope: { attack: 0.001, decay: 0.1, release: 0.05 }, harmonicity: 5.1, modulationIndex: 32, resonance: 4000, octaves: 1.5}).toDestination();
        const cymbalSynth = new Tone.MetalSynth({ frequency: 100, envelope: { attack: 0.001, decay: 1.2, release: 0.5 }, harmonicity: 8.5, modulationIndex: 40, resonance: 8000, octaves: 2}).toDestination();

        Tone.Transport.bpm.value = 100;

        const startButton = document.getElementById('startButton');
        const stopButton = document.getElementById('stopButton');
        const scaleDisplay = document.getElementById('scaleDisplay');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const tempoSlider = document.getElementById('tempoSlider');
        const bpmDisplay = document.getElementById('bpmDisplay');
        const nextScaleDisplay = document.getElementById('nextScaleDisplay');
        const selectAllButton = document.getElementById('selectAllButton');
        const deselectAllButton = document.getElementById('deselectAllButton');

        let currentRootNoteName;
        let currentScaleType;
        let currentRootChordNotes;
        let currentBassNote;
        let nextRootNoteName;
        let nextScaleType;

        const allNotes = ["C", "C#", "Db", "D", "D#", "Eb", "E", "F", "F#", "Gb", "G", "G#", "Ab", "A", "A#", "Bb", "B"];
        const majorChordIntervals = [0, 4, 7];
        const minorChordIntervals = [0, 3, 7];

        let metronomeSequence;
        let mainLoop;
        let measureCounter = 0; // Ajout d'un compteur de mesure

        function createScaleCheckboxes() {
            const majorContainer = document.getElementById('majorScalesCheckboxes');
            const minorContainer = document.getElementById('minorScalesCheckboxes');
            allNotes.forEach(note => {
                const majorDiv = document.createElement('div');
                majorDiv.className = 'flex items-center';
                majorDiv.innerHTML = `<input type="checkbox" id="scale_${note}_major" class="mr-2 form-checkbox" checked><label for="scale_${note}_major">${note} Majeur</label>`;
                majorContainer.appendChild(majorDiv);
                const minorDiv = document.createElement('div');
                minorDiv.className = 'flex items-center';
                minorDiv.innerHTML = `<input type="checkbox" id="scale_${note}_minor" class="mr-2 form-checkbox" checked><label for="scale_${note}_minor">${note} Mineure</label>`;
                minorContainer.appendChild(minorDiv);
            });
        }

        function updateStartButtonState() {
            const anyChecked = document.querySelectorAll('.scale-selection-container input[type="checkbox"]:checked').length > 0;
            startButton.disabled = !anyChecked;
            if (!anyChecked && Tone.Transport.state === 'started') {
                stopPlayback();
                scaleDisplay.textContent = 'Sélectionnez au moins une gamme !';
                nextScaleDisplay.textContent = 'N/A';
            } else if (anyChecked && Tone.Transport.state !== 'started' && scaleDisplay.textContent === 'Sélectionnez au moins une gamme !') {
                scaleDisplay.textContent = 'Cliquez sur "Démarrer"';
            }
        }

        function generateRandomScale() {
            const playableScales = [];
            document.querySelectorAll('.scale-selection-container input[type="checkbox"]:checked').forEach(checkbox => {
                const [note, type] = checkbox.id.replace('scale_', '').split('_');
                playableScales.push({ root: note, isMajor: type === 'major' });
            });
            if (playableScales.length === 0) return null;
            const randomIndex = Math.floor(Math.random() * playableScales.length);
            return playableScales[randomIndex];
        }

        async function startPlayback() {
            try {
                await Tone.start();
                console.log("AudioContext is running and Tone.Transport started.");
            } catch (e) {
                console.error("Failed to start Tone.js audio context:", e);
                scaleDisplay.textContent = 'Erreur audio : Impossible de démarrer le son. Veuillez interagir avec la page.';
                startButton.disabled = false;
                stopButton.disabled = true;
                loadingSpinner.style.display = 'none';
                return;
            }

            const initialCurrentScale = generateRandomScale();
            if (!initialCurrentScale) {
                scaleDisplay.textContent = 'Sélectionnez au moins une gamme pour démarrer !';
                return;
            }
            
            currentRootNoteName = initialCurrentScale.root;
            currentScaleType = initialCurrentScale.isMajor ? 'Majeur' : 'Mineure';
            const initialNextScale = generateRandomScale();
            if (initialNextScale) {
                nextRootNoteName = initialNextScale.root;
                nextScaleType = initialNextScale.isMajor ? 'Majeur' : 'Mineure';
            } else {
                nextRootNoteName = 'N/A';
                nextScaleType = '';
            }

            startButton.disabled = true;
            stopButton.disabled = false;
            loadingSpinner.style.display = 'block';
            scaleDisplay.textContent = `${currentRootNoteName} ${currentScaleType}`;
            nextScaleDisplay.textContent = `${nextRootNoteName} ${nextScaleType}`;

            mainLoop = new Tone.Loop((time) => {
                // Vérifier si la boucle a atteint 4 mesures
                if (measureCounter % 4 === 0) {
                    if (nextRootNoteName === 'N/A') {
                        stopPlayback();
                        return;
                    }
                    currentRootNoteName = nextRootNoteName;
                    currentScaleType = nextScaleType;
                    const newNextScale = generateRandomScale();
                    if (newNextScale) {
                        nextRootNoteName = newNextScale.root;
                        nextScaleType = newNextScale.isMajor ? 'Majeur' : 'Mineure';
                        nextScaleDisplay.textContent = `${nextRootNoteName} ${nextScaleType}`;
                    } else {
                        nextScaleDisplay.textContent = 'N/A';
                    }
                    scaleDisplay.textContent = `${currentRootNoteName} ${currentScaleType}`;
                }
                
                // Déclencher les événements audio pour la mesure actuelle
                const currentChordIntervals = currentScaleType === 'Majeur' ? majorChordIntervals : minorChordIntervals;
                currentRootChordNotes = currentChordIntervals.map(interval => Tone.Midi(currentRootNoteName + '3').toMidi() + interval).map(midi => Tone.Midi(midi).toNote());
                currentBassNote = currentRootNoteName + '2';

                chordSynth.triggerAttackRelease(currentRootChordNotes, "1n", time);
                scaleDisplay.style.backgroundColor = 'rgba(99, 179, 237, 0.3)';
                setTimeout(() => { scaleDisplay.style.backgroundColor = 'transparent'; }, 100);

                new Tone.Sequence((noteTime) => {
                    bassSynth.triggerAttackRelease(currentBassNote, "8n", noteTime);
                }, [0, 1, 2, 3], "4n").start(time);
                
                // Incrémenter le compteur de mesures
                measureCounter++;

            }, "1m"); // La boucle se répète toutes les 1 mesure

            metronomeSequence = new Tone.Sequence((time, beat) => {
                if (beat === 0) {
                    metronomeSynth.triggerAttackRelease("G5", "16n", time, 0.4);
                    cymbalSynth.triggerAttackRelease("C5", "1n", time);
                } else {
                    metronomeSynth.triggerAttackRelease("C4", "16n", time, 0.2);
                }
                hiHatSynth.triggerAttackRelease("C6", "32n", time, 0.1);
            }, [0, 1, 2, 3], "4n");

            metronomeSequence.start(0);
            mainLoop.start(0);
            Tone.Transport.start();

            loadingSpinner.style.display = 'none';
        }

        function stopPlayback() {
            if (mainLoop) { mainLoop.stop(); }
            if (metronomeSequence) { metronomeSequence.stop(); }
            Tone.Transport.stop();
            Tone.Transport.cancel(0);
            measureCounter = 0; // Réinitialiser le compteur à l'arrêt
            startButton.disabled = false;
            stopButton.disabled = true;
            scaleDisplay.textContent = 'Cliquez sur "Démarrer"';
            nextScaleDisplay.textContent = 'N/A';
            scaleDisplay.style.backgroundColor = 'transparent';
        }

        startButton.addEventListener('click', startPlayback);
        stopButton.addEventListener('click', stopPlayback);

        tempoSlider.addEventListener('input', (event) => {
            const newBPM = event.target.value;
            bpmDisplay.textContent = newBPM;
            Tone.Transport.bpm.value = newBPM;
        });

        selectAllButton.addEventListener('click', () => {
            document.querySelectorAll('.scale-selection-container input[type="checkbox"]').forEach(checkbox => { checkbox.checked = true; });
            updateStartButtonState();
        });

        deselectAllButton.addEventListener('click', () => {
            document.querySelectorAll('.scale-selection-container input[type="checkbox"]').forEach(checkbox => { checkbox.checked = false; });
            updateStartButtonState();
        });

        document.addEventListener('change', (event) => {
            if (event.target.matches('.scale-selection-container input[type="checkbox"]')) {
                updateStartButtonState();
            }
        });

        window.onload = () => {
            createScaleCheckboxes();
            updateStartButtonState();
            bpmDisplay.textContent = tempoSlider.value;
        };
    </script>
</body>
</html>